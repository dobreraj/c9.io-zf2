{"ts":1380448667095,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n\nnamespace ZfcUser\\Controller;\n\nuse Zend\\Form\\Form;\nuse Zend\\Mvc\\Controller\\AbstractActionController;\nuse Zend\\Stdlib\\ResponseInterface as Response;\nuse Zend\\Stdlib\\Parameters;\nuse Zend\\View\\Model\\ViewModel;\nuse ZfcUser\\Service\\User as UserService;\nuse ZfcUser\\Options\\UserControllerOptionsInterface;\n\nclass UserController extends AbstractActionController\n{\n    const ROUTE_CHANGEPASSWD = 'zfcuser/changepassword';\n    const ROUTE_LOGIN        = 'zfcuser/login';\n    const ROUTE_REGISTER     = 'zfcuser/register';\n    const ROUTE_CHANGEEMAIL  = 'zfcuser/changeemail';\n\n    const CONTROLLER_NAME    = 'zfcuser';\n\n    /**\n     * @var UserService\n     */\n    protected $userService;\n\n    /**\n     * @var Form\n     */\n    protected $loginForm;\n\n    /**\n     * @var Form\n     */\n    protected $registerForm;\n\n    /**\n     * @var Form\n     */\n    protected $changePasswordForm;\n\n    /**\n     * @var Form\n     */\n    protected $changeEmailForm;\n\n    /**\n     * @todo Make this dynamic / translation-friendly\n     * @var string\n     */\n    protected $failedLoginMessage = 'Authentication failed. Please try again.';\n\n    /**\n     * @var UserControllerOptionsInterface\n     */\n    protected $options;\n\n    /**\n     * User page\n     */\n    public function indexAction()\n    {\n        if (!$this->zfcUserAuthentication()->hasIdentity()) {\n            return $this->redirect()->toRoute(static::ROUTE_LOGIN);\n        }\n        return new ViewModel();\n    }\n\n    /**\n     * Login form\n     */\n    public function loginAction()\n    {\n        if ($this->zfcUserAuthentication()->getAuthService()->hasIdentity()) {\n            return $this->redirect()->toRoute($this->getOptions()->getLoginRedirectRoute());\n        }\n\n        $request = $this->getRequest();\n        $form    = $this->getLoginForm();\n\n        if ($this->getOptions()->getUseRedirectParameterIfPresent() && $request->getQuery()->get('redirect')) {\n            $redirect = $request->getQuery()->get('redirect');\n        } else {\n            $redirect = false;\n        }\n\n        if (!$request->isPost()) {\n            return array(\n                'loginForm' => $form,\n                'redirect'  => $redirect,\n                'enableRegistration' => $this->getOptions()->getEnableRegistration(),\n            );\n        }\n\n        $form->setData($request->getPost());\n\n        if (!$form->isValid()) {\n            $this->flashMessenger()->setNamespace('zfcuser-login-form')->addMessage($this->failedLoginMessage);\n            return $this->redirect()->toUrl($this->url()->fromRoute(static::ROUTE_LOGIN).($redirect ? '?redirect='.$redirect : ''));\n        }\n\n        // clear adapters\n        $this->zfcUserAuthentication()->getAuthAdapter()->resetAdapters();\n        $this->zfcUserAuthentication()->getAuthService()->clearIdentity();\n\n        return $this->forward()->dispatch(static::CONTROLLER_NAME, array('action' => 'authenticate'));\n    }\n\n    /**\n     * Logout and clear the identity\n     */\n    public function logoutAction()\n    {\n        $this->zfcUserAuthentication()->getAuthAdapter()->resetAdapters();\n        $this->zfcUserAuthentication()->getAuthAdapter()->logoutAdapters();\n        $this->zfcUserAuthentication()->getAuthService()->clearIdentity();\n\n        $redirect = $this->params()->fromPost('redirect', $this->params()->fromQuery('redirect', false));\n\n        if ($this->getOptions()->getUseRedirectParameterIfPresent() && $redirect) {\n            return $this->redirect()->toUrl($redirect);\n        }\n\n        return $this->redirect()->toRoute($this->getOptions()->getLogoutRedirectRoute());\n    }\n\n    /**\n     * General-purpose authentication action\n     */\n    public function authenticateAction()\n    {\n        if ($this->zfcUserAuthentication()->getAuthService()->hasIdentity()) {\n            return $this->redirect()->toRoute($this->getOptions()->getLoginRedirectRoute());\n        }\n\n        $adapter = $this->zfcUserAuthentication()->getAuthAdapter();\n        $redirect = $this->params()->fromPost('redirect', $this->params()->fromQuery('redirect', false));\n\n        $result = $adapter->prepareForAuthentication($this->getRequest());\n\n        // Return early if an adapter returned a response\n        if ($result instanceof Response) {\n            return $result;\n        }\n\n        $auth = $this->zfcUserAuthentication()->getAuthService()->authenticate($adapter);\n\n        if (!$auth->isValid()) {\n            $this->flashMessenger()->setNamespace('zfcuser-login-form')->addMessage($this->failedLoginMessage);\n            $adapter->resetAdapters();\n            return $this->redirect()->toUrl($this->url()->fromRoute(static::ROUTE_LOGIN)\n                . ($redirect ? '?redirect='.$redirect : ''));\n        }\n\n        if ($this->getOptions()->getUseRedirectParameterIfPresent() && $redirect) {\n            return $this->redirect()->toUrl($redirect);\n        }\n\n        return $this->redirect()->toRoute($this->getOptions()->getLoginRedirectRoute());\n    }\n\n    /**\n     * Register new user\n     */\n    public function registerAction()\n    {\n        // if the user is logged in, we don't need to register\n        if ($this->zfcUserAuthentication()->hasIdentity()) {\n            // redirect to the login redirect route\n            return $this->redirect()->toRoute($this->getOptions()->getLoginRedirectRoute());\n        }\n        // if registration is disabled\n        if (!$this->getOptions()->getEnableRegistration()) {\n            return array('enableRegistration' => false);\n        }\n        \n        $request = $this->getRequest();\n        $service = $this->getUserService();\n        $form = $this->getRegisterForm();\n\n        if ($this->getOptions()->getUseRedirectParameterIfPresent() && $request->getQuery()->get('redirect')) {\n            $redirect = $request->getQuery()->get('redirect');\n        } else {\n            $redirect = false;\n        }\n\n        $redirectUrl = $this->url()->fromRoute(static::ROUTE_REGISTER)\n            . ($redirect ? '?redirect=' . $redirect : '');\n        $prg = $this->prg($redirectUrl, true);\n\n        if ($prg instanceof Response) {\n            return $prg;\n        } elseif ($prg === false) {\n            return array(\n                'registerForm' => $form,\n                'enableRegistration' => $this->getOptions()->getEnableRegistration(),\n                'redirect' => $redirect,\n            );\n        }\n\n        $post = $prg;\n        $user = $service->register($post);\n\n        $redirect = isset($prg['redirect']) ? $prg['redirect'] : null;\n\n        if (!$user) {\n            return array(\n                'registerForm' => $form,\n                'enableRegistration' => $this->getOptions()->getEnableRegistration(),\n                'redirect' => $redirect,\n            );\n        }\n\n        if ($service->getOptions()->getLoginAfterRegistration()) {\n            $identityFields = $service->getOptions()->getAuthIdentityFields();\n            if (in_array('email', $identityFields)) {\n                $post['identity'] = $user->getEmail();\n            } elseif (in_array('username', $identityFields)) {\n                $post['identity'] = $user->getUsername();\n            }\n            $post['credential'] = $post['password'];\n            $request->setPost(new Parameters($post));\n            return $this->forward()->dispatch(static::CONTROLLER_NAME, array('action' => 'authenticate'));\n        }\n\n        // TODO: Add the redirect parameter here...\n        return $this->redirect()->toUrl($this->url()->fromRoute(static::ROUTE_LOGIN) . ($redirect ? '?redirect='.$redirect : ''));\n    }\n\n    /**\n     * Change the users password\n     */\n    public function changepasswordAction()\n    {\n        // if the user isn't logged in, we can't change password\n        if (!$this->zfcUserAuthentication()->hasIdentity()) {\n            // redirect to the login redirect route\n            return $this->redirect()->toRoute($this->getOptions()->getLoginRedirectRoute());\n        }\n\n        $form = $this->getChangePasswordForm();\n        $prg = $this->prg(static::ROUTE_CHANGEPASSWD);\n\n        $fm = $this->flashMessenger()->setNamespace('change-password')->getMessages();\n        if (isset($fm[0])) {\n            $status = $fm[0];\n        } else {\n            $status = null;\n        }\n\n        if ($prg instanceof Response) {\n            return $prg;\n        } elseif ($prg === false) {\n            return array(\n                'status' => $status,\n                'changePasswordForm' => $form,\n            );\n        }\n\n        $form->setData($prg);\n\n        if (!$form->isValid()) {\n            return array(\n                'status' => false,\n                'changePasswordForm' => $form,\n            );\n        }\n\n        if (!$this->getUserService()->changePassword($form->getData())) {\n            return array(\n                'status' => false,\n                'changePasswordForm' => $form,\n            );\n        }\n\n        $this->flashMessenger()->setNamespace('change-password')->addMessage(true);\n        return $this->redirect()->toRoute(static::ROUTE_CHANGEPASSWD);\n    }\n\n    public function changeEmailAction()\n    {\n        // if the user isn't logged in, we can't change email\n        if (!$this->zfcUserAuthentication()->hasIdentity()) {\n            // redirect to the login redirect route\n            return $this->redirect()->toRoute($this->getOptions()->getLoginRedirectRoute());\n        }\n\n        $form = $this->getChangeEmailForm();\n        $request = $this->getRequest();\n        $request->getPost()->set('identity', $this->getUserService()->getAuthService()->getIdentity()->getEmail());\n\n        $fm = $this->flashMessenger()->setNamespace('change-email')->getMessages();\n        if (isset($fm[0])) {\n            $status = $fm[0];\n        } else {\n            $status = null;\n        }\n\n        $prg = $this->prg(static::ROUTE_CHANGEEMAIL);\n        if ($prg instanceof Response) {\n            return $prg;\n        } elseif ($prg === false) {\n            return array(\n                'status' => $status,\n                'changeEmailForm' => $form,\n            );\n        }\n\n        $form->setData($prg);\n\n        if (!$form->isValid()) {\n            return array(\n                'status' => false,\n                'changeEmailForm' => $form,\n            );\n        }\n\n        $change = $this->getUserService()->changeEmail($prg);\n\n        if (!$change) {\n            $this->flashMessenger()->setNamespace('change-email')->addMessage(false);\n            return array(\n                'status' => false,\n                'changeEmailForm' => $form,\n            );\n        }\n\n        $this->flashMessenger()->setNamespace('change-email')->addMessage(true);\n        return $this->redirect()->toRoute(static::ROUTE_CHANGEEMAIL);\n    }\n\n    /**\n     * Getters/setters for DI stuff\n     */\n\n    public function getUserService()\n    {\n        if (!$this->userService) {\n            $this->userService = $this->getServiceLocator()->get('zfcuser_user_service');\n        }\n        return $this->userService;\n    }\n\n    public function setUserService(UserService $userService)\n    {\n        $this->userService = $userService;\n        return $this;\n    }\n\n    public function getRegisterForm()\n    {\n        if (!$this->registerForm) {\n            $this->setRegisterForm($this->getServiceLocator()->get('zfcuser_register_form'));\n        }\n        return $this->registerForm;\n    }\n\n    public function setRegisterForm(Form $registerForm)\n    {\n        $this->registerForm = $registerForm;\n    }\n\n    public function getLoginForm()\n    {\n        if (!$this->loginForm) {\n            $this->setLoginForm($this->getServiceLocator()->get('zfcuser_login_form'));\n        }\n        return $this->loginForm;\n    }\n\n    public function setLoginForm(Form $loginForm)\n    {\n        $this->loginForm = $loginForm;\n        $fm = $this->flashMessenger()->setNamespace('zfcuser-login-form')->getMessages();\n        if (isset($fm[0])) {\n            $this->loginForm->setMessages(\n                array('identity' => array($fm[0]))\n            );\n        }\n        return $this;\n    }\n\n    public function getChangePasswordForm()\n    {\n        if (!$this->changePasswordForm) {\n            $this->setChangePasswordForm($this->getServiceLocator()->get('zfcuser_change_password_form'));\n        }\n        return $this->changePasswordForm;\n    }\n\n    public function setChangePasswordForm(Form $changePasswordForm)\n    {\n        $this->changePasswordForm = $changePasswordForm;\n        return $this;\n    }\n\n    /**\n     * set options\n     *\n     * @param UserControllerOptionsInterface $options\n     * @return UserController\n     */\n    public function setOptions(UserControllerOptionsInterface $options)\n    {\n        $this->options = $options;\n        return $this;\n    }\n\n    /**\n     * get options\n     *\n     * @return UserControllerOptionsInterface\n     */\n    public function getOptions()\n    {\n        if (!$this->options instanceof UserControllerOptionsInterface) {\n            $this->setOptions($this->getServiceLocator()->get('zfcuser_module_options'));\n        }\n        return $this->options;\n    }\n\n    /**\n     * Get changeEmailForm.\n     *\n     * @return changeEmailForm.\n     */\n    public function getChangeEmailForm()\n    {\n        if (!$this->changeEmailForm) {\n            $this->setChangeEmailForm($this->getServiceLocator()->get('zfcuser_change_email_form'));\n        }\n        return $this->changeEmailForm;\n    }\n\n    /**\n     * Set changeEmailForm.\n     *\n     * @param changeEmailForm the value to set.\n     */\n    public function setChangeEmailForm($changeEmailForm)\n    {\n        $this->changeEmailForm = $changeEmailForm;\n        return $this;\n    }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":13611}]],"length":13611}
