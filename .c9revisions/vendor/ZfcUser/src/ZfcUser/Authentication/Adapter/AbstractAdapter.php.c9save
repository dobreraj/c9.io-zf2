{"ts":1380448656642,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n\nnamespace ZfcUser\\Authentication\\Adapter;\n\nuse Zend\\Authentication\\Storage;\n\nabstract class AbstractAdapter implements ChainableAdapter\n{\n    /**\n     * @var Storage\\StorageInterface\n     */\n    protected $storage;\n\n    /**\n     * Returns the persistent storage handler\n     *\n     * Session storage is used by default unless a different storage adapter has been set.\n     *\n     * @return Storage\\StorageInterface\n     */\n    public function getStorage()\n    {\n        if (null === $this->storage) {\n            $this->setStorage(new Storage\\Session(get_called_class()));\n        }\n\n        return $this->storage;\n    }\n\n    /**\n     * Sets the persistent storage handler\n     *\n     * @param  Storage\\StorageInterface $storage\n     * @return AbstractAdapter Provides a fluent interface\n     */\n    public function setStorage(Storage\\StorageInterface $storage)\n    {\n        $this->storage = $storage;\n        return $this;\n    }\n\n    /**\n     * Check if this adapter is satisfied or not\n     *\n     * @return bool\n     */\n    public function isSatisfied()\n    {\n        $storage = $this->getStorage()->read();\n        return (isset($storage['is_satisfied']) && true === $storage['is_satisfied']);\n    }\n\n    /**\n     * Set if this adapter is satisfied or not\n     *\n     * @param bool $bool\n     * @return AbstractAdapter\n     */\n    public function setSatisfied($bool = true)\n    {\n        $storage = $this->getStorage()->read() ?: array();\n        $storage['is_satisfied'] = $bool;\n        $this->getStorage()->write($storage);\n        return $this;\n    }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":1569}]],"length":1569}
